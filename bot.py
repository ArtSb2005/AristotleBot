# -*- coding: utf-8 -*-
import logging
import time
import os
from aiogram import Bot, Dispatcher, executor, types
import sqlite3
import requests
from bs4 import BeautifulSoup
import random
from config import BOT_TOKEN

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –ë–î
conn = sqlite3.connect('database.db', check_same_thread=False)
cursor = conn.cursor()
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(BOT_TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –†–ö–°–ò
list_group = ["–ò–°-15", "–ò–°-16", "–ü–û–ö–°-32", "4–°–ö-–î–û2", "–ë–î-11", "–ë–î-12", "–ë–î-21", "–ë–£-11", "–ë–£-21", "–ë–£-41", "–î-21",
              "–î-31", "–î-41", "–ò–ë–ê-12", "–ò–ë–ê-13", "–ò–ë–ê-14", "–ò–ë–ê-22", "–ò–ë–ê-24", "–ò–ë–ê-25", "–ò–ë–ê-32", "–ò–ë–ê-34", "–ò–ë–ê-34",
              "–ò–ë–ê-42", "–ò–ë–ê-44", "–ò–ë–¢-11", "–ò–ë–¢-12", "–ò–ë–¢-13", "–ò–ë–¢-14", "–ò–ë–¢-21", "–ò–ë–¢-23", "–ò–ë–¢-31", "–ò–ë–¢-33",
              "–ò–ë–¢-41", "–ò–ë–¢-43", "–ò–ö–°-11", "–ò–ö–°-12", "–ò–ö–°-13", "–ò–°-11", "–ò–°-12", "–ò–°-13", "–ò–°-14", "–ò–°-15", "–ò–°-16",
              "–ò–°-17", "–ò–°-18", "–ò–°-21", "–ö–ú-11", "–ö–ú-12", "–ö–ú-21", "–ö–ú-31", "–ö–°-31", "–ö–°-32", "–ö–°-33", "–ö–°-34",
              "–ö–°-35",
              "–ö–°-36", "–ö–°-41", "–ö–°-41", "–ö–°-42", "–ö–°-43", "–ö–°-44", "–ö–°-45", "–ú–¢-21", "–ú–¢-22", "–ú–¢-23", "–ú–¢-24",
              "–ú–¢-31",
              "–ú–¢-32", "–ú–¢-33", "–ü–ò-23", "–ü–ò-31", "–ü–ò-32", "–ü–ò-33", "–ü–ò-41", "–ü–û–ö–°-21", "–ü–û–ö–°-22", "–ü–û–ö–°-23", "–ü–û–ö–°-24",
              "–ü–û–ö–°-25", "–ü–û–ö–°-26", "–ü–û–ö–°-27", "–ü–û–ö–°-31w", "–ü–û–ö–°-32b", "–ü–û–ö–°-33w", "–ü–û–ö–°-34b", "–ü–û–ö–°-35b", "–ü–û–ö–°-36w",
              "–ü–û–ö–°-37w", "–ü–û–ö–°-38b", "–ü–û–ö–°-41", "–ü–û–ö–°-42", "–ü–û–ö–°-43", "–ü–û–ö–°-44", "–ü–û–ö–°-45", "–ü–û–ö–°-46", "–ü–û–ö–°-47",
              "–ü–û–ö–°-48",
              "–ü–û–ö–°-49", "–†–¢-11", "–†–¢-21", "–†–¢-31", "–°–ê-11", "–°–ê-12", "–°–ê-13", "–°–ê-14", "–°–ê-15", "–°–ê-16", "–°–ê-17",
              "–°–ê-21",
              "–°–ê-21", "–°–ê-23", "–°–ê-24", "–°–ê-25", "–°–ê-26", "–°–ö-21", "–°–ö-31", "–£–ü-21", "–£–ü-31", "–£–ü-41"]


# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞
def biblioteka(author: str, name: str, link: str):
    bl = cursor.execute('SELECT * FROM Biblioteka WHERE author=?', (author,))
    bl1 = cursor.execute('SELECT * FROM Biblioteka WHERE name=?', (name,))
    bl2 = cursor.execute('SELECT * FROM Biblioteka WHERE link=?', (link,))
    if (bl2.fetchone()) is None:
        cursor.execute('INSERT INTO Biblioteka (author, name, link) VALUES (?, ?, ?)',
                       (author, name, link))
        conn.commit()
    else:
        pass


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def db_table_val(user_id: int, user_name: str, username: str, groupa: str):
    info = cursor.execute('SELECT * FROM Aristotle WHERE user_id=?', (user_id,))
    if info.fetchone() is None:
        cursor.execute('INSERT INTO Aristotle (user_id, user_name, username, groupa) VALUES (?, ?, ?, ?)',
                       (user_id, user_name, username, groupa))
        conn.commit()
    else:
        pass


# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üìñ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µüìñ", "üë®‚Äçüíª–ê–≤—Ç–æ—Ä—ãüë®‚Äçüíª", "üìö–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞üìö", "üìú–ù–æ–≤–æ—Å—Ç–∏üìú", "‚öôÔ∏è–ê–∫–∫–∞—É–Ω—Ç‚öôÔ∏è",
               "üë®‚Äçüè´–î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–πüë©‚Äçüè´"]
    keyboard.add(*buttons)
    await message.answer(
        "_________üéì–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å –±–æ—Çüéì_________\n‚úÖ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ. \n‚úÖ–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–°-15 \n‚úÖ–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        reply_markup=keyboard)


# –ú–µ–Ω—é
@dp.message_handler(lambda message: message.text == "‚Ü™Ô∏è–ú–µ–Ω—é‚Ü©Ô∏è")
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üìñ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µüìñ", "üë®‚Äçüíª–ê–≤—Ç–æ—Ä—ãüë®‚Äçüíª", "üìö–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞üìö", "üìú–ù–æ–≤–æ—Å—Ç–∏üìú", "‚öôÔ∏è–ê–∫–∫–∞—É–Ω—Ç‚öôÔ∏è",
               "üë®‚Äçüè´–î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–πüë©‚Äçüè´"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=keyboard)


# –ù–æ–≤–æ—Å—Ç–∏
@dp.message_handler(lambda message: message.text == "üìú–ù–æ–≤–æ—Å—Ç–∏üìú")
async def without_puree(message: types.Message):
    URL = 'https://www.rksi.ru/news'
    HEADERS = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0'
    }

    resource = requests.get(URL, headers=HEADERS)
    soup = BeautifulSoup(resource.content, "html.parser")
    items = soup.find_all('div', class_='flexnews')
    items1 = soup.select("img")[3].attrs["src"]
    i = 2
    kol = 0
    for item in items:
        i += 1
        kol += 1
        await message.answer("üßæ" + item.text[11:] + "\nhttps://www.rksi.ru/" + soup.select("img")[i].attrs["src"])
        if kol == 3:
            break


# –ê–∫–∫–∞—É–Ω—Ç
@dp.message_handler(lambda message: message.text == "‚öôÔ∏è–ê–∫–∫–∞—É–Ω—Ç‚öôÔ∏è")
async def without_pur1(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üí¨–ü–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—Éüí¨", "‚ùå–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç‚ùå", "‚Ü™Ô∏è–ú–µ–Ω—é‚Ü©Ô∏è"]
    keyboard.add(*buttons)
    await message.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞', reply_markup=keyboard)


# –ó–∞–º–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã
@dp.message_handler(lambda message: message.text == "üí¨–ü–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—Éüí¨")
async def cmd_start(message: types.Message):
    conn = sqlite3.connect('database.db', check_same_thread=False)
    cursor = conn.cursor()
    people_id = message.from_user.id
    cursor.execute(f"DELETE FROM Aristotle WHERE user_id = {people_id}")
    conn.commit()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—Éüñã")


# –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
@dp.message_handler(lambda message: message.text == "‚ùå–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç‚ùå")
async def cmd_start(message: types.Message):
    conn = sqlite3.connect('database.db', check_same_thread=False)
    cursor = conn.cursor()
    people_id = message.from_user.id
    cursor.execute(f"DELETE FROM Aristotle WHERE user_id = {people_id}")
    conn.commit()
    await message.answer("üö´–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ωüö´")


# –î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler(lambda message: message.text == "üë®‚Äçüè´–î–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–πüë©‚Äçüè´")
async def without_pur1(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')


# –ü–∞—Ä–æ–ª—å
@dp.message_handler(lambda message: message.text == "8767")
async def without_pur1(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üìö–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—Éüìö", "üìö–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏üìö", "‚Ü™Ô∏è–ú–µ–Ω—é‚Ü©Ô∏è"]
    keyboard.add(*buttons)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üìñ–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µüìñ", callback_data="instr_dz"))
    keyboard.add(types.InlineKeyboardButton(text="üìö–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏üìö", callback_data="instr_book"))
    await message.answer('‚úÖ–£—Å–ø–µ—à–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup=keyboard)


# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query_handler(text="instr_dz")
async def without_pur1(call: types.CallbackQuery):
    with open('instr.jpg', 'rb') as photo:
        await call.message.reply_photo(photo=photo,
                                       caption='‚ùóÔ∏è–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 2 –ø—Ä–æ–±–µ–ª–∞!!!‚ùóÔ∏è\n–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∫–æ–º–∞–Ω–¥—ã:\n "/dz –†—É—Å—Å–∫–∏–π_—è–∑—ã–∫_—Å—Ç—Ä_34_‚Ññ2 –ò–°-15"')


# –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
@dp.message_handler(lambda message: message.text == "üìñ–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µüìñ")
async def without_puree(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üìñ–°–º–æ—Ç—Ä–µ—Ç—å –¥–∑üìñ", "‚Ü™Ô∏è–ú–µ–Ω—é‚Ü©Ô∏è"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "üìñ–°–º–æ—Ç—Ä–µ—Ç—å –¥–∑üìñ")
async def without_puree(message: types.Message):
    people_id = str(message.from_user.id)
    cursor.execute("SELECT * FROM Aristotle")
    uds = cursor.fetchall()
    try:
        for row in uds:
            list = str(row)
            list2 = list.strip("(").strip(")").strip("'").replace(", '", ", ").replace("',", ",").replace(", ", " ")

            list3 = list2.split(' ')

            if people_id == list3[1]:
                gr = list3[4]
                file_id = f'output{gr}.txt'
                print(file=open(file_id, "a"))
                with open(file_id, 'r') as f:
                    fl = f.read()
                    await message.answer(fl)
    except:
        await message.answer("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä—Ä—É–ø–ø—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
@dp.message_handler(lambda message: message.text in list_group)
async def get_name(message: types.Message):
    await message.answer(
        '‚úÖ–ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ê–∫–∫–∞—É–Ω—Ç"->"–ü–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É", –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É')
    # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–¥
    conn = sqlite3.connect('database.db', check_same_thread=False)
    cursor = conn.cursor()
    people_id = message.from_user.id
    cursor.execute(f"DELETE FROM Aristotle WHERE user_id = {people_id}")
    conn.commit()

    us_id = message.from_user.id
    us_name = message.from_user.first_name
    usernames = message.from_user.username
    group = message.text

    db_table_val(user_id=us_id, user_name=us_name, username=usernames, groupa=group)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –î/–ó
@dp.message_handler(commands="dz")
async def without_puree(message: types.Message):
    global domzad
    global list_message
    try:
        dz = message.text
        list_message = dz.split(' ')
        print(list_message, file=open("output3.txt", "a"))
        cursor.execute("SELECT * FROM Aristotle")
        records = cursor.fetchall()
        for row in records:
            print(row, file=open("output.txt", "a"))
        group_1 = list_message[2]
        with open('output.txt') as file:
            for line in file:
                if group_1 in line:
                    lines = line.replace('\n', '')
                    print(lines, file=open("output1.txt", "a"))
        time.sleep(1)

        with open('output1.txt', 'r') as f:
            for line in f:
                text1 = list(line)
                text2 = ' '.join(text1)
                text3 = text2.replace(' ', '')
                text4 = text3.split(',')
                id = text4[1]
                group = list_message[2]
                domzad = list_message[1]
                await bot.send_message(chat_id=id, text="üìñ" + domzad)
        file_id = f'output{group}.txt'
        print(domzad, file=open(file_id, "a"))
        domzad = list_message[1]

        await message.answer("üìñ‚úÖ" + "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" + "‚úÖüìñ")
        path = "output.txt"
        os.remove(path)
        path = "output3.txt"
        os.remove(path)
        path = "output1.txt"
        os.remove(path)
    except:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã/–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞')


# –ê–≤—Ç–æ—Ä—ã
@dp.message_handler(lambda message: message.text == "üë®‚Äçüíª–ê–≤—Ç–æ—Ä—ãüë®‚Äçüíª")
async def without_puree(message: types.Message):
    await message.answer(
        "_________üéì–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å –±–æ—Çüéì_________\nüë®‚Äçüíª–°–æ–∑–¥–∞—Ç–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞:\nü•á–ë–æ–π–∫–æ –ê—Ä—Ç—ë–ºü•á\nü•á–°–±–æ–µ–≤ –ê—Ä—Ç—ë–ºü•á\nü•á–ö—É–ª—å–ø–∏–Ω–æ–≤ –ù–∏–∫–∏—Ç–∞ü•á")


# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞
# –í—Å—ë –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
# –í—Å—ë –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
# –í—Å—ë –ø–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
@dp.callback_query_handler(text="instr_book")
async def without_pur1(call: types.CallbackQuery):
    with open('instr_book.jpg', 'rb') as photo:
        await call.message.reply_photo(photo=photo,
                                       caption='‚ùóÔ∏è–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 3 –ø—Ä–æ–±–µ–ª–∞!!!‚ùóÔ∏è\n–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –∫–æ–º–∞–Ω–¥—ã:\n "/book –ê–ª–∏–º–æ–≤ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞_10-11_–∫–ª–∞—Å—Å https://clck.ru/ZPfE3"')


@dp.message_handler(commands="book")
async def without_puree(message: types.Message):
    book = message.text
    book_list = book.split(' ')
    try:
        author = book_list[1]
        name = book_list[2]
        link = book_list[3]

        biblioteka(author=author, name=name, link=link)
        await message.answer("üìö–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–∞–∑—É –¥–∞–Ω–Ω—ã—Öüìö")
    except IndexError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")


# –ê–≤—Ç–æ—Ä—ã
@dp.message_handler(lambda message: message.text == "üë®‚Äçüíª–ê–≤—Ç–æ—Ä—ãüë®‚Äçüíª")
async def without_puree(message: types.Message):
    await message.answer("---–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å---\n–°–æ–∑–¥–∞—Ç–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n–ë–æ–π–∫–æ –ê—Ä—Ç—ë–º\n–°–±–æ–µ–≤ –ê—Ä—Ç—ë–º\n–ö—É–ª—å–ø–∏–Ω–æ–≤ –ù–∏–∫–∏—Ç–∞")


# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞
@dp.message_handler(lambda message: message.text == "üìö–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞üìö")
async def without_puree(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üßë‚Äçüíª–ü–æ –∞–≤—Ç–æ—Ä—Éüßë‚Äçüíª", "üì£–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—éüì£", "üóì–ö–∞—Ç–∞–ª–æ–≥üóì", "‚Ü™Ô∏è–ú–µ–Ω—é‚Ü©Ô∏è"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", reply_markup=keyboard)


# –ü–æ –∞–≤—Ç–æ—Ä—É
@dp.message_handler(lambda message: message.text == "üßë‚Äçüíª–ü–æ –∞–≤—Ç–æ—Ä—Éüßë‚Äçüíª")
async def without_puree(message: types.Message):
    await message.answer("üßë‚Äçüíª–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∞:")


# –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é
@dp.message_handler(lambda message: message.text == "üì£–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—éüì£")
async def without_puree(message: types.Message):
    await message.answer("üì£–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:\n‚ùóÔ∏è–ü—Ä–æ–±–µ–ª–æ–≤ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ‚ùóÔ∏è")


# –ö–∞—Ç–∞–ª–æ–≥
@dp.message_handler(lambda message: message.text == "üóì–ö–∞—Ç–∞–ª–æ–≥üóì")
async def without_puree(message: types.Message):
    cursor.execute("SELECT * FROM biblioteka")
    uds = cursor.fetchall()
    for row in uds:
        list = str(row)
        list2 = list.strip("(").strip(")").strip("'").replace("', '", " ")
        list3 = list2.split(' ')
        list4 = list3[:2]
        list5 = str(list4)
        list6 = list5.strip("[").strip("]").strip("'").replace("', '", " --- ")
        await bot.send_message(chat_id=message.chat.id, text=random.choice(["üìï", "üìó", "üìò", "üìô"]) + list6)


@dp.message_handler(lambda message: message.text)
async def without_puree(message: types.Message):
    a = message.text
    cursor.execute("SELECT * FROM biblioteka")
    uds = cursor.fetchall()

    for row in uds:
        list = str(row)
        list2 = list.strip("(").strip(")").strip("'").replace("', '", " --- ")
        if a in row:
            await message.answer(random.choice(["üìï", "üìó", "üìò", "üìô"]) + list2)
            result = 1
        else:
            result = 0
    if result == 0:
        await message.answer("–¢–∞–∫–æ–π —Ñ–∏—á–∏ –º—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏:(\nüèÜ–ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –º–µ—Å—Ç–∞ –≤ —Ö–∞–∫–∞—Ç–æ–Ω–µüèÜ")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
